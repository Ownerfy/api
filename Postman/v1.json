{
	"info": {
		"_postman_id": "76324d09-f5f1-4446-8e89-8f3fa199689c",
		"name": "Ownerfy API",
		"description": "Ownerfy NFT API documentation. You must have an authorization token to use this API. For production server root use [https://ownerfy.com/api/v1](https://ownerfy.com/api/v1)\n\nAPI Bearer keys for production and staging are different. Get your staging keys here:  \n[https://staging.ownerfy.io](https://staging.ownerfy.io)  \nTransactions on staging are deployed on the Mumbai test network.\n\nProduction keys are obtained here:  \n[https://ownerfy.com](https://ownerfy.com)  \nProduction transactions are deployed on the Polygon blockchain. Ethereum transactions are available upon request. Contact [support@ownerfy.com](mailto:support@ownerfy.com) for API questions.\n\nRemember to:\n\n- Use the correct bearer token for your environment\n- Do not include comments in json body requests\n    \n\n**Authorization Header**  \n\"Authorization\" : \"Bearer YOUR_API_KEY\"",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Create User (Wallet)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9be5da2f-7fbf-4450-b7fa-6fc93e3acaa0",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "ed7e2ec0-e932-4310-a841-e4a889883b73",
						"exec": [
							"if (pm?.request?.body?.options?.raw?.language === 'json') { const rawData = pm.request.body.toString(); const strippedData = rawData.replace( /\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m ); pm.request.body.update(JSON.stringify(JSON.parse(strippedData))); }"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "9c61328f-8ef2-43a3-af67-34754b2eea69",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"test@testemail.com\", // Optional - Needed for emailing verification codes from Ownerfy. \n    \"phoneNumber\": \"3234445555\", // Optional\n    \"username\": \"User Name\" // Optional\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{server_root}}/api/v1/user/create",
				"description": "All body parameters are optional, but without an email we will not send an email for code verification. Code verification numbers can still be generated without email.\n\n```\n{\n    \"email\": \"test@email.com\", // Optional - Needed for emailing verification codes from Ownerfy. \n    \"phoneNumber\": \"3334445555\", // Optional\n    \"username\": \"User Name\" // Optional\n}\n\n```"
			},
			"response": [
				{
					"id": "2795adb8-6562-4707-aece-a7a9c58a9db5",
					"name": "Create User With Optional Data",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"test@testemail.com\",\n    \"phoneNumber\": \"3236521111\",\n    \"username\": \"User Name\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{server_root}}/api/v1/user/create"
					},
					"_postman_previewlanguage": null,
					"header": null,
					"cookie": [],
					"responseTime": null,
					"body": null
				},
				{
					"id": "b2ac7e87-790c-42a6-bc79-2de898fc08b1",
					"name": "Create User No Params",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"url": "{{server_root}}/api/v1/user/create"
					},
					"_postman_previewlanguage": null,
					"header": null,
					"cookie": [],
					"responseTime": null,
					"body": null
				}
			]
		},
		{
			"name": "Update User",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9be5da2f-7fbf-4450-b7fa-6fc93e3acaa0",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "ed7e2ec0-e932-4310-a841-e4a889883b73",
						"exec": [
							"if (pm?.request?.body?.options?.raw?.language === 'json') { const rawData = pm.request.body.toString(); const strippedData = rawData.replace( /\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m ); pm.request.body.update(JSON.stringify(JSON.parse(strippedData))); }"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "afc35c43-1029-45a1-9e56-21d2dda4de00",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"test@testemail.com\", // Optional - Needed for emailing verification codes from Ownerfy. \n    \"phoneNumber\": \"3234445555\", // Optional\n    \"username\": \"User Name\" // Optional\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{server_root}}/api/v1/user/update/:ownerfyUserId",
					"host": [
						"{{server_root}}"
					],
					"path": [
						"api",
						"v1",
						"user",
						"update",
						":ownerfyUserId"
					],
					"variable": [
						{
							"key": "ownerfyUserId",
							"value": null
						}
					]
				}
			},
			"response": [
				{
					"id": "093073bc-4db3-44b2-afff-926704433b76",
					"name": "Create User With Optional Data",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"test@testemail.com\",\n    \"phoneNumber\": \"3236521111\",\n    \"username\": \"User Name\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{server_root}}/api/v1/user/create"
					},
					"_postman_previewlanguage": null,
					"header": null,
					"cookie": [],
					"responseTime": null,
					"body": null
				},
				{
					"id": "a32cb583-2e6e-4c46-a917-2eb948122753",
					"name": "Create User No Params",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"url": "{{server_root}}/api/v1/user/create"
					},
					"_postman_previewlanguage": null,
					"header": null,
					"cookie": [],
					"responseTime": null,
					"body": null
				}
			]
		},
		{
			"name": "Get User Details",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b42f518b-1cec-4ac3-8dc4-85db31176723",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "2113d0d5-c9c5-4bd0-9e0b-3e1cb06cd68e",
						"exec": [
							"if (pm?.request?.body?.options?.raw?.language === 'json') { const rawData = pm.request.body.toString(); const strippedData = rawData.replace( /\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m ); pm.request.body.update(JSON.stringify(JSON.parse(strippedData))); }"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "24fa55c6-3a1f-407a-b384-de8c76353a85",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": ""
					}
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{server_root}}/api/v1/user/get/:ownerfyUserId",
					"host": [
						"{{server_root}}"
					],
					"path": [
						"api",
						"v1",
						"user",
						"get",
						":ownerfyUserId"
					],
					"variable": [
						{
							"key": "ownerfyUserId",
							"value": "qz8uZ21p8d5svnnO34kH"
						}
					]
				}
			},
			"response": [
				{
					"id": "68434c6d-af2e-43c9-a20e-2f659862f889",
					"name": "Get User Default Company User Details",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": "{{server_root}}/api/v1/user/get/TX4UduiPsTYhPSoIBWME"
					},
					"_postman_previewlanguage": null,
					"header": null,
					"cookie": [],
					"responseTime": null,
					"body": null
				}
			]
		},
		{
			"name": "Get All Company Created Users",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0adf8978-e959-4bc6-a233-dbc7819a8d2d",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "44efd29b-9c64-4450-bfac-aba1e4b4363f",
						"exec": [
							"if (pm?.request?.body?.options?.raw?.language === 'json') { const rawData = pm.request.body.toString(); const strippedData = rawData.replace( /\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m ); pm.request.body.update(JSON.stringify(JSON.parse(strippedData))); }"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "ea27b1db-9b18-4559-ad39-b00c9cb2bb8a",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{server_root}}/api/v1/user/list"
			},
			"response": []
		},
		{
			"name": "Get Transaction Details",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c841aa6f-094c-4fc1-b2d8-6a2b1d5bdc2a",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "9859a9ea-b804-4ed5-ad6c-1ea2443ef6b1",
						"exec": [
							"if (pm?.request?.body?.options?.raw?.language === 'json') { const rawData = pm.request.body.toString(); const strippedData = rawData.replace( /\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m ); pm.request.body.update(JSON.stringify(JSON.parse(strippedData))); }"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "f2bc4cd2-405a-4077-8565-ab50ae04f24a",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": ""
					}
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{server_root}}/api/v1/transaction/get/:transactionId",
					"host": [
						"{{server_root}}"
					],
					"path": [
						"api",
						"v1",
						"transaction",
						"get",
						":transactionId"
					],
					"variable": [
						{
							"key": "transactionId",
							"value": "tHRjCnY4cQUiJ0XoF42A"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get NFTs for Ownerfy User ID",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "fdc2e475-d627-41ad-867f-bd139470ae2a",
						"exec": [
							"if (pm?.request?.body?.options?.raw?.language === 'json') { const rawData = pm.request.body.toString(); const strippedData = rawData.replace( /\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m ); pm.request.body.update(JSON.stringify(JSON.parse(strippedData))); }"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "47a346f6-e601-444a-b8fb-b20e7486ebc7",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{server_root}}/api/v1/nft/list/ownerfyUserId/:ownerfyUserId",
					"host": [
						"{{server_root}}"
					],
					"path": [
						"api",
						"v1",
						"nft",
						"list",
						"ownerfyUserId",
						":ownerfyUserId"
					],
					"variable": [
						{
							"key": "ownerfyUserId",
							"value": null
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get NFTs for Public Address",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "fec756be-95cc-4063-b73d-8cd6d2edf99b",
						"exec": [
							"if (pm?.request?.body?.options?.raw?.language === 'json') { const rawData = pm.request.body.toString(); const strippedData = rawData.replace( /\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m ); pm.request.body.update(JSON.stringify(JSON.parse(strippedData))); }"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "a36355b1-0e6f-4a2e-aea1-44bdf5074215",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{server_root}}/api/v1/nft/list/address/:address",
					"host": [
						"{{server_root}}"
					],
					"path": [
						"api",
						"v1",
						"nft",
						"list",
						"address",
						":address"
					],
					"variable": [
						{
							"key": "address",
							"value": null
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Company Owned NFTs",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "a2e5a5bd-7b79-4d1c-b677-83be81956249",
						"exec": [
							"if (pm?.request?.body?.options?.raw?.language === 'json') { const rawData = pm.request.body.toString(); const strippedData = rawData.replace( /\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m ); pm.request.body.update(JSON.stringify(JSON.parse(strippedData))); }"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "de153aae-e619-4ed0-8f90-372a33092b23",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": ""
					}
				},
				"method": "GET",
				"header": [],
				"url": "{{server_root}}/api/v1/nft/list"
			},
			"response": []
		},
		{
			"name": "Get Single NFT Metadata and Current Owner(s)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "d6e5a626-5329-4c92-9f2a-a97cdb743f2c",
						"exec": [
							"if (pm?.request?.body?.options?.raw?.language === 'json') { const rawData = pm.request.body.toString(); const strippedData = rawData.replace( /\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m ); pm.request.body.update(JSON.stringify(JSON.parse(strippedData))); }"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "3fdc5540-f5b9-48c3-b786-46927cde52ae",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": ""
					}
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{server_root}}/api/v1/nft/get/:contract/:blockchainTokenId/:blockchain?",
					"host": [
						"{{server_root}}"
					],
					"path": [
						"api",
						"v1",
						"nft",
						"get",
						":contract",
						":blockchainTokenId",
						":blockchain"
					],
					"query": [
						{
							"key": "",
							"value": null
						}
					],
					"variable": [
						{
							"key": "contract",
							"value": null,
							"description": "Contract must be supplied"
						},
						{
							"key": "blockchainTokenId",
							"value": null,
							"description": "Blockchain Token ID"
						},
						{
							"key": "blockchain",
							"value": null,
							"description": "Optional - If no blockchain is provided polygon will be used "
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Contracts Created",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "aad6d5a4-f5c2-439f-934b-e888acd00cbb",
						"exec": [
							"if (pm?.request?.body?.options?.raw?.language === 'json') { const rawData = pm.request.body.toString(); const strippedData = rawData.replace( /\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m ); pm.request.body.update(JSON.stringify(JSON.parse(strippedData))); }"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "2115b4c6-0136-4f7d-9d15-32d2851c4bdd",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{server_root}}/api/v1/collection/get"
			},
			"response": []
		},
		{
			"name": "Get QR code to Ownerfy",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "e333cfcd-f24a-4d48-ac19-2a613173edcd",
						"exec": [
							"if (pm?.request?.body?.options?.raw?.language === 'json') { const rawData = pm.request.body.toString(); const strippedData = rawData.replace( /\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m ); pm.request.body.update(JSON.stringify(JSON.parse(strippedData))); }"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "d4659bca-3caf-4565-8d33-907e7ee429fb",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{server_root}}/api/v1/qrcode/ownerfy/:contract/:tokenId",
					"host": [
						"{{server_root}}"
					],
					"path": [
						"api",
						"v1",
						"qrcode",
						"ownerfy",
						":contract",
						":tokenId"
					],
					"variable": [
						{
							"key": "contract",
							"value": "0x938bc8b1355F5F14E174Db9A3b8C826344ff7dEd"
						},
						{
							"key": "tokenId",
							"value": "32786686714"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get QR code to OpenSea",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "3dd71e82-00fd-4f83-8e1a-1ad26af2efa7",
						"exec": [
							"if (pm?.request?.body?.options?.raw?.language === 'json') { const rawData = pm.request.body.toString(); const strippedData = rawData.replace( /\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m ); pm.request.body.update(JSON.stringify(JSON.parse(strippedData))); }"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "e5d9d2c7-a401-475c-8d9e-263aefb2a2a6",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{server_root}}/api/v1/qrcode/opensea/:contract/:tokenId",
					"host": [
						"{{server_root}}"
					],
					"path": [
						"api",
						"v1",
						"qrcode",
						"opensea",
						":contract",
						":tokenId"
					],
					"variable": [
						{
							"key": "contract",
							"value": "0x938bc8b1355F5F14E174Db9A3b8C826344ff7dEd"
						},
						{
							"key": "tokenId",
							"value": "32786686714"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Generate Custom QR",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "88409340-149e-47d0-8925-9f50eb50276b",
						"exec": [
							"if (pm?.request?.body?.options?.raw?.language === 'json') { const rawData = pm.request.body.toString(); const strippedData = rawData.replace( /\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m ); pm.request.body.update(JSON.stringify(JSON.parse(strippedData))); }"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "30ccf331-9c22-4182-b679-c2366ca061dc",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{server_root}}/api/v1/qrcode/:link",
					"host": [
						"{{server_root}}"
					],
					"path": [
						"api",
						"v1",
						"qrcode",
						":link"
					],
					"variable": [
						{
							"key": "link",
							"value": "https://test.com"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Mint NFTs",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "99b43ffa-dd00-49a7-b625-ece19c76be08",
						"exec": [
							"if (pm?.request?.body?.options?.raw?.language === 'json') { const rawData = pm.request.body.toString(); const strippedData = rawData.replace( /\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m ); pm.request.body.update(JSON.stringify(JSON.parse(strippedData))); }"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "2b84a1fe-729f-43c2-b4d5-c08d592b9fa1",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": ""
					}
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"contract\": \"0x6aC3beCE6DA0af3E30b1af95F0B5f67140b7353B\", // If not supplied this will mint to your default smart contract created with your admin account otherwise use any smart contract you create in the api \n    \"fromOwnerfyUserId\": \"LlZw4R1hwqojvjvcspCm\", // Optional only if using a contract created by a subuser. Only the wallet that created a contract can mint to it.\n    //\"fromAddress\": \"0x037f3812d21c669d3fcc54cdbdea8e3091dd995b\", // Use either this or fromOwnerfyUserId. Only wallets that were created on your account are valid\n    \"nfts\": [ // Up to 10 per request\n        {\n            \"name\": \"test 1\",\n            \"description\": \"test description 1\",\n            \"imageUrl\": \"https://firebasestorage.googleapis.com/v0/b/receiptcoin-receiptchain-de560.appspot.com/o/website%2Fnftdemo%2Fownerfy-icon-app.jpg?alt=media&token=594784fe-04c4-4307-8021-83826daab59c\",\n            \"attributes\": [\n                {\"trait_type\": \"Level\", \"value\": \"10\"},{\"trait_type\": \"Hair Color\", \"value\": \"Brown\"}\n                ] // Optional attributes show up as separate parsable values. Values can be numbers but must always be in quotes as strings. Any number of attributes can be added. This is the standard NFT metadata format for attributes.\n        },\n        {\n            \"contract\": \"0x6aC3beCE6DA0af3E30b1af95F0B5f67140b7353B\", // Contract can be specified per NFT as well\n            \"toAddress\": \"0xd6d6796c84ca569a54cb82337b31a7e4d27b32af\", // Ether send to an ETH address or OwnerfyUserId - External Addresses OK\n            //\"toOwnerfyUserId\": \"JbjLtR6wDmldHVUOXOev\", // Optionally mint directly to a user\n            \"name\": \"test 2\",\n            \"description\": \"test description 2\",\n            \"imageUrl\": \"https://firebasestorage.googleapis.com/v0/b/receiptcoin-receiptchain-de560.appspot.com/o/website%2Fnftdemo%2Fownerfy-icon-app.jpg?alt=media&token=594784fe-04c4-4307-8021-83826daab59c\",\n            \"clientTokenId\": 12348 // Optional marker that will be passed back\n        }\n    ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{server_root}}/api/v1/nft/create"
			},
			"response": [
				{
					"id": "d0647c99-39d4-471e-abc3-651cbe64c1df",
					"name": "Mint an NFT and leave it in the company account",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"contract\": \"0x6aC3beCE6DA0af3E30b1af95F0B5f67140b7353B\",\n    \"nfts\": [\n        {\n            \"name\": \"test mint A\",\n            \"description\": \"test description A\",\n            \"imageUrl\": \"https://firebasestorage.googleapis.com/v0/b/receiptcoin-receiptchain-de560.appspot.com/o/website%2Fnftdemo%2Fownerfy-icon-app.jpg?alt=media&token=594784fe-04c4-4307-8021-83826daab59c\"\n        },\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{server_root}}/api/v1/nft/create"
					},
					"_postman_previewlanguage": null,
					"header": null,
					"cookie": [],
					"responseTime": null,
					"body": null
				},
				{
					"id": "921b5fcd-bfdb-441d-baa9-3d01344c188e",
					"name": "Mint an NFT to a previously created user account",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"contract\": \"0x6aC3beCE6DA0af3E30b1af95F0B5f67140b7353B\",\n    \"nfts\": [\n        {\n            \"toOwnerfyUserId\": \"JbjLtR6wDmldHVUOXOev\",\n            \"name\": \"test mint B\",\n            \"description\": \"test description B\",\n            \"imageUrl\": \"https://firebasestorage.googleapis.com/v0/b/receiptcoin-receiptchain-de560.appspot.com/o/website%2Fnftdemo%2Fownerfy-icon-app.jpg?alt=media&token=594784fe-04c4-4307-8021-83826daab59c\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{server_root}}/api/v1/nft/create"
					},
					"_postman_previewlanguage": null,
					"header": null,
					"cookie": [],
					"responseTime": null,
					"body": null
				}
			]
		},
		{
			"name": "Transfer NFT",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5b53668c-46bd-4947-865c-ecd2840b00d9",
						"exec": [
							"if (pm?.request?.body?.options?.raw?.language === 'json') { const rawData = pm.request.body.toString(); const strippedData = rawData.replace( /\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m ); pm.request.body.update(JSON.stringify(JSON.parse(strippedData))); }"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "cff803ef-5c4c-49ce-826e-2f54bc0deccb",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": ""
					}
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"contract\": \"0x6aC3beCE6DA0af3E30b1af95F0B5f67140b7353B\", // Specifiy contract for all or override below\n    \"fromOwnerfyUserId\": \"LlZw4R1hwqojvjvcspCm\", // Only the wallet that owns a token can send it.\n    //\"fromAddress\": \"0x037f3812d21c669d3fcc54cdbdea8e3091dd995b\", // Use either this or fromOwnerfyUserId.\n    \"nfts\": [ // Up to 10 at a time\n        {\n            \"contract\": \"0x6aC3beCE6DA0af3E30b1af95F0B5f67140b7353B\",\n            \"blockchainTokenId\": \"12387344\", \n            \"toAddress\": \"0xc0faB703eBB1EF59a015b921D04232bEcb1Bc5B1\", // Can use any external ethereum or polygon address\n            // Optionally use this or toOwnerfyUserId\n            //\"toOwnerfyUserId\": \"JbjLtR6wDmldHVUOXOev\",  // Optionally use this or to address\n            \"fromAddress\": \"0x037f3812d21c669d3fcc54cdbdea8e3091dd995b\" // Must be a managed from address. Overrides parent from address.\n            //\"fromOwnerfyUserId\": \"LlZw4R1hwqojvjvcspCm\" // Overrides parent key\n            \n        }\n    ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{server_root}}/api/v1/nft/transfer"
			},
			"response": []
		},
		{
			"name": "Send Verification Code to NFT Owner",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "71416274-d43d-4a26-8a6b-efef86f42c6a",
						"exec": [
							"if (pm?.request?.body?.options?.raw?.language === 'json') { const rawData = pm.request.body.toString(); const strippedData = rawData.replace( /\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m ); pm.request.body.update(JSON.stringify(JSON.parse(strippedData))); }"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "350cc242-ac1e-4772-918d-75a7b652253f",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": ""
					}
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"contract\": \"0x6aC3beCE6DA0af3E30b1af95F0B5f67140b7353B\", // Contract of the NFT to be validated\n    \"blockchainTokenId\": \"12341134\" // Token of the NFT to be validated\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{server_root}}/api/v1/nft/sendVerificationCode"
			},
			"response": []
		},
		{
			"name": "Verify Code That Was Sent to An NFT Owner Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e8a4c6fe-9621-43c7-a7c3-2184627c71e8",
						"exec": [
							"if (pm?.request?.body?.options?.raw?.language === 'json') { const rawData = pm.request.body.toString(); const strippedData = rawData.replace( /\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m ); pm.request.body.update(JSON.stringify(JSON.parse(strippedData))); }"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "7d5ce95d-80b4-49c6-aa80-373cf747b207",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": ""
					}
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"contract\": \"0x6aC3beCE6DA0af3E30b1af95F0B5f67140b7353B\", // Contract of the NFT to be validated\n    \"blockchainTokenId\": \"12341134\", // Token of the NFT to be validated\n    \"code\": \"654321\" // Code that was sent to the owner. It should be coming from a party trying to verify ownership. This party should have attained the code from the owner. Expires after 24 hours.\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{server_root}}/api/v1/nft/verifyCode"
			},
			"response": []
		},
		{
			"name": "Create Collection (Smart Contract)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5527857e-cda9-4515-aa86-4b973cf3191c",
						"exec": [
							"if (pm?.request?.body?.options?.raw?.language === 'json') { const rawData = pm.request.body.toString(); const strippedData = rawData.replace( /\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m ); pm.request.body.update(JSON.stringify(JSON.parse(strippedData))); }"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "2dd66323-83ca-457d-8074-0bf079c598ee",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\n      \"name\": \"Test 1\",\n      \"contractType\": \"unlimited_v1\" // Optional\n      // \"fromOwnerfyUserId\": \"JbjLtR6wDmldHVUOXOev\" // Optionally mint from user account\n\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{server_root}}/api/v1/collection/create"
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": {
			"token": "0000000-0000-0000-0000-0000000000"
		}
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "51c0afbb-a9f1-4d0f-9147-ee1efb5752ed",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "82b34b3f-9efc-47d4-a9a8-f6fb8fbbdd6b",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "44e2f5e6-934d-4b20-87a3-dd78c49c50c0",
			"key": "dev_token",
			"value": "4c3576b8-a226-4bb5-a7d6-8a8ddbff0000"
		},
		{
			"id": "c76a08df-844f-4ec6-9019-1b8a148c32c5",
			"key": "api_root",
			"value": "https://ownerfy.com"
		},
		{
			"id": "6f6170d1-3037-4c4e-b5fd-46f56dfb09ce",
			"key": "local_root",
			"value": "http://localhost:5000/receiptchain-dev/us-central1/app"
		},
		{
			"id": "86c272dd-a554-44cb-b2cb-89b4677da205",
			"key": "prod_token",
			"value": "4c3576b8-a226-4bb5-a7d6-8a8ddbff0000",
			"type": "string"
		},
		{
			"id": "7d6b8aa7-35f4-4cb7-b9f1-1d48b286be70",
			"key": "place_holder_token",
			"value": "4c3576b8-a226-4bb5-a7d6-8a8ddbff0000",
			"type": "string"
		},
		{
			"id": "599b300b-25ec-496f-83ab-ee447b8325e3",
			"key": "server_root",
			"value": "https://ownerfy.com/api/v1",
			"type": "string"
		}
	]
}